// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma-types"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    paypalEmail   String?
    image         String?
    accounts      Account[]
    sessions      Session[]

    tabA Tab[] @relation("userA")
    tabB Tab[] @relation("userB")
}

model Tab {
    userA_ID     String
    userB_ID     String
    userA        User          @relation("userA", fields: [userA_ID], references: [id])
    userB        User          @relation("userB", fields: [userB_ID], references: [id])
    amountOwed   Float
    transactions Transaction[]

    @@id([userA_ID, userB_ID], name: "id")
    @@index([userB_ID])
    @@index([userA_ID])
}

model Transaction {
    ID          String @id @default(cuid())
    tabUserA_ID String
    tabUserB_ID String
    tab         Tab    @relation(fields: [tabUserA_ID, tabUserB_ID], references: [userA_ID, userB_ID])
    amount      Float

    code      String?
    pending   Boolean  @default(false)
    createdAt DateTime @default(now())

    @@index([tabUserA_ID, tabUserB_ID])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
